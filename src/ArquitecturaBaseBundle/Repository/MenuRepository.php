<?php

namespace ArquitecturaBaseBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MenuRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MenuRepository extends EntityRepository
{
    /**
     * Comprueba si existe un menu con la ruta dada. Por negocio, no debe repetirse un menu
     * con la misma ruta.
     * @param $ruta string
     */
    public function BuscarMenuDeRuta($ruta){

    }

    public function buscarMenusSinConcesionesQB(){
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('menu.id')
            ->from('ArquitecturaBaseBundle:Menu','menu')
            ->innerJoin('menu.concesiones','concesiones')
        ;
        $tienen = $qb->getQuery()->getResult();
        $qb->select('m')
            ->from('ArquitecturaBaseBundle:Menu','m')
            ->where($qb->expr()->notIn('m.id',':prmArrayId'))
            ->setParameter('prmArrayId',$tienen)
        ;
        $notienen = $qb;
        return $notienen;
    }

    public function MenusContenedoresQB(){
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('menu')
            ->from('ArquitecturaBaseBundle:Menu','menu')
            ->andWhere($qb->expr()->isNull('menu.ruta'))
        ;
        return $qb;
    }

    public function listarMenusPadres(){
    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('menu')
        ->from('ArquitecturaBaseBundle:Menu','menu')
        ->andWhere($qb->expr()->isNull('menu.padre'))
    ;
    return $qb->getQuery()->getResult();
}

    public function listarMenus(){
        $menus = $this->findAll();
        return $menus;
    }

    public function listarMenusDadosId($idArray){
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('menu')
            ->from('ArquitecturaBaseBundle:Menu','menu')
            ->andWhere($qb->expr()->in('menu.id',':prmIdArray'))
            ->setParameter('prmIdArray', $idArray)
        ;
        return $qb->getQuery()->getResult();
    }
}
